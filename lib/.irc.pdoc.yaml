---
id: "IRC"
type: class
line_number: 9
description: |
  An IRC library for node.js

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "new IRC"
parent_id: "IRC"
type: constructor
line_number: 51
description: |
  Creates a new `IRC` instance.
  
  ### Examples
  
      var irc = new IRC({ server: 'irc.freenode.net', nick: 'lolbot' });

signatures:
 -
  signature: "new IRC(options)"
arguments:
 -
  name: options
  types: [Object]
  description: >
    Options for specific instance.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#connect"
parent_id: "IRC"
type: instance method
line_number: 169
description: |
  Connect to the server.

signatures:
 -
  signature: "IRC#connect([hollaback])"
  return_value: "self"
arguments:
 -
  name: hollaback
  types: [Function]
  description: >
    Optional callback to be executed when the connection is established an ready.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#disconnect"
parent_id: "IRC"
type: instance method
line_number: 204
description: |
  Disconnect from the server. It is best practices to use the `quit`
  convenience method.

signatures:
 -
  signature: "IRC#disconnect()"
  return_value: "self"
file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#raw"
parent_id: "IRC"
type: instance method
line_number: 221
description: |
  Send a raw IRC command to the server. Used internally by the convenience
  methods. Note: It is not recommended to use this method, convenience
  methods should be used instead to ensure data consistency.
  
  ### Examples
  
      irc_instance.raw(':YourNick TOPIC #channel :LOL This is awesome!'); // Set a channel topic

signatures:
 -
  signature: "IRC#raw(data)"
  return_value: "self"
arguments:
 -
  name: data
  types: [String]
  description: >
    Raw IRC command to be sent to server

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#addListener"
parent_id: "IRC"
type: instance method
line_number: 244
description: |
  Listen for incoming IRC messages.
  
  ### Examples
  
      irc_instance.addListener('PING', pingListener); // Listens for the PING message from server

signatures:
 -
  signature: "IRC#addListener(event, listener)"
  return_value: "null"
arguments:
 -
  name: event
  types: [String]
  description: >
    Event to listen for

 -
  name: listener
  types: [Function]
  description: >
    Event listener, called when event is emitted.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#removeListener"
parent_id: "IRC"
type: instance method
line_number: 262
description: |
  Stop listening for incoming IRC messages.
  
  ### Examples
  
      irc_instance.removeListener('PING', pingListener); // Stops listening for the PING message from server

signatures:
 -
  signature: "IRC#removeListener(event, listener)"
  return_value: "null"
arguments:
 -
  name: event
  types: [String]
  description: >
    Event to stop listening for

 -
  name: listener
  types: [Function]
  description: >
    Event listener to unregister

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#listenOnce"
parent_id: "IRC"
type: instance method
line_number: 279
description: |
  Listen only once for an incoming IRC message.
  
  ### Examples
  
      irc_instance.listenOnce('PING', pingListener); // Listens for the *next* PING message from server, then unregisters itself

signatures:
 -
  signature: "IRC#listenOnce(event, listener)"
  return_value: "null"
arguments:
 -
  name: event
  types: [String]
  description: >
    Event to listen for

 -
  name: listener
  types: [Function]
  description: >
    Event listener, called when event is emitted.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#pass"
parent_id: "IRC"
type: instance method
line_number: 311
description: |
  Issue a server password. Note that this must be sent before anything else,
  and is handled automatically by the `connect` method - so it's kinda
  useless outside of this class. Be sure to set a `pass` in the `options`
  should you need to connect with a password.
  
  ### Examples
  
      irc_instance.pass('lol123');

signatures:
 -
  signature: "IRC#pass(password)"
  return_value: "self"
arguments:
 -
  name: password
  types: [String]
  description: >
    Server password

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#nick"
parent_id: "IRC"
type: instance method
line_number: 327
description: |
  Used to set or change a user's nick name.
  
  ### Examples
  
      irc_instance.nick('Jeff'); // Set user's nickname to `Jeff`

signatures:
 -
  signature: "IRC#nick(nickname)"
  return_value: "self"
arguments:
 -
  name: nickname
  types: [String]
  description: >
    Desired nick name.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#user"
parent_id: "IRC"
type: instance method
line_number: 348
description: |
  Specify user's identify to the server. `username` must not contain spaces,
  but `realname` may.
  
  ### Examples
  
      irc_instance.user('king', false, true, 'Lion King');

signatures:
 -
  signature: "IRC#user(username, wallops, invisible, realname)"
  return_value: "self"
arguments:
 -
  name: username
  types: [String]
  description: >
    User name

 -
  name: wallops
  types: [Boolean]
  description: >
    Set +w on connect

 -
  name: invisible
  types: [Boolean]
  description: >
    Set +i on connect

 -
  name: realname
  types: [String]
  description: >
    Real name

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#oper"
parent_id: "IRC"
type: instance method
line_number: 366
description: |
  Obtain operator privelages.
  
  ### Examples
  
      irc_instance.oper('king', 'lol123');

signatures:
 -
  signature: "IRC#oper(user, password)"
  return_value: "self"
arguments:
 -
  name: user
  types: [String]
  description: >
    Username

 -
  name: password
  types: [String]
  description: >
    Password

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#quit"
parent_id: "IRC"
type: instance method
line_number: 383
description: |
  Quit the server, passing an optional message. Note: the `disconnect`
  method is called internally from `quit`.
  
  ### Examples
  
      irc_instance.quit(); // Quit without a message
      irc_instance.quit('LOLeaving!'); // Quit with a hilarious exit message

signatures:
 -
  signature: "IRC#quit([message])"
  return_value: "self"
arguments:
 -
  name: message
  types: [String]
  description: >
    Quit message

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#join"
parent_id: "IRC"
type: instance method
line_number: 401
description: |
  Start listening for messages from a given channel.
  
  ### Examples
  
      irc_instance.join('#asl'); // Join the channel `#asl`
      irc_instance.join('#asxxxl', 'lol123'); // Join the channel `#asxxl` with the key `lol123`

signatures:
 -
  signature: "IRC#join(channel[, key])"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Channel to join

 -
  name: key
  types: [String]
  description: >
    Channel key

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#part"
parent_id: "IRC"
type: instance method
line_number: 416
description: |
  Stop listening for messages from a given channel
  
  ### Examples
  
      irc_instance.part('#asl'); // You've had your fill of `#asl` for the day

signatures:
 -
  signature: "IRC#part(channel)"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Channel to part

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#channelMode"
parent_id: "IRC"
type: instance method
line_number: 435
description: |
  - channel (String): Channel to apply mode
  - mode (String): Mode to apply
  - limit (Number): Optional - used in conjunction with `l` mode
  - user (String): Optional - used in conjunction with some modes
  - ban_mask (String): Optional - used in conjunction with `b` mode
  
  Set various channel modes. For a full list of channel modes, see: http://docs.dal.net/docs/modes.html#2
  
  ### Examples
  
      irc_instance.channelMode('#asl', '+im'); // Makes `#asl` moderated and invite only

signatures:
 -
  signature: "IRC#channelMode(channel, mode[, limit][, user][, ban_mask])"
  return_value: "self"
file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#userMode"
parent_id: "IRC"
type: instance method
line_number: 450
description: |
  Set various user modes on yourself. For a full list of user modes, see: http://docs.dal.net/docs/modes.html#3
  
  ### Examples
  
      irc_instance.userMode('-o'); // De-ops user

signatures:
 -
  signature: "IRC#userMode(mode)"
  return_value: "self"
arguments:
 -
  name: mode
  types: [String]
  description: >
    Mode to apply

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#topic"
parent_id: "IRC"
type: instance method
line_number: 471
description: |
  Retreive or set a channel's topic.
  
  ### Examples
  
      irc_instance.topic('#asl', 'Laaaadddddiiiiiieeeeeesssssss'); // Set a channel topic
      irc_instance.topic('#asl', function (c, t) {
          print('Topic in ' + c + ' is: ' + t);
      });

signatures:
 -
  signature: "IRC#topic(channel, topic)"
  return_value: "self"
 -
  signature: "IRC#topic(channel, hollaback)"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Channel to set/get topic

 -
  name: topic
  types: [String]
  description: >
    Topic to set

 -
  name: hollaback
  types: [Function]
  description: >
    Callback to receive the channel topic. The first argument is the channel, the second is the topic.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#names"
parent_id: "IRC"
type: instance method
line_number: 500
description: |
  Get a list of everyone in a channel.
  
  ### Examples
  
      irc_instance.names('#asl', function (channel, names) {
          this.privmsg(channel, 'Hi ' + names.join(', ') + '!');
      }); // Say hi to everyone in the channel

signatures:
 -
  signature: "IRC#names(channel, hollaback)"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Channel to query

 -
  name: hollaback
  types: [Function]
  description: >
    Callback to receive the names list. The first argument is the channel, the second is an array of names.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#list"
parent_id: "IRC"
type: instance method
line_number: 525
description: |
  List the information about a given channel, or all channels. Optional first parameter is the channel.
  
  ### Examples
  
      irc_instance.list('#asl', showList); // `showList` would receive something like the following as it's only parameter: `['#asl', 57, 'Find hookups in here!']`
      irc_instance.list(listAll);

signatures:
 -
  signature: "IRC#list(channel, hollaback)"
  return_value: "self"
 -
  signature: "IRC#list(hollaback)"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Channel to list information for.

 -
  name: hollaback
  types: [Function]
  description: >
    Callback to receive the channel list. As it's single parameter it receives one or many arrays with three elements. The first element is the channel name, the second is the user count, the third is the topic.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#invite"
parent_id: "IRC"
type: instance method
line_number: 576
description: |
  Invite a user to a channel.
  
  ### Examples
  
      irc_instance.invite('BloodNinja', '#asl'); // I put on my robe and wizard hat...

signatures:
 -
  signature: "IRC#invite(nickname, channel)"
  return_value: "self"
arguments:
 -
  name: nickname
  types: [String]
  description: >
    User to invite.

 -
  name: channel
  types: [String]
  description: >
    Channel to invite user to.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#kick"
parent_id: "IRC"
type: instance method
line_number: 594
description: |
  Kick a user from a channel that you haver operator privelages for.
  
  ### Examples
  
      irc_instance.kick('#asl', 'some_douche'); // Kick `some_douche` from `#asl`
      irc_instance.kick('#asl', 'pedobear', 'TOO OLD!'); // Kick user with a comment

signatures:
 -
  signature: "IRC#kick(channel, user [, comment])"
  return_value: "self"
arguments:
 -
  name: channel
  types: [String]
  description: >
    Chennel to kick user from.

 -
  name: user
  types: [String]
  description: >
    User to kick.

 -
  name: comment
  types: [String]
  description: >
    Optional comment for kicking.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#version"
parent_id: "IRC"
type: instance method
line_number: 611
description: |
  Query server for version information.
  
  ### Examples
  
      irc_instance.version(whatVersion);

signatures:
 -
  signature: "IRC#version(server, hollaback)"
  return_value: "self"
 -
  signature: "IRC#version(hollaback)"
  return_value: "self"
arguments:
 -
  name: server
  types: [String]
  description: >
    Optional, specific server to query.

 -
  name: hollaback
  types: [Function]
  description: >
    Callback to receive server version info.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC#privmsg"
parent_id: "IRC"
type: instance method
line_number: 636
description: |
  Send a message to a user or channel. `privmsg` will automagically split
  long messages into multiple messages.
  
  ### Examples
  
      irc_instance.privmsg('#asl', 'What\'s up ladiiieeeessssss!?'); // Ask the ladies `what's up`

signatures:
 -
  signature: "IRC#privmsg(receiver, message [, protect])"
  return_value: "self"
arguments:
 -
  name: receiver
  types: [String]
  description: >
    Recipient of message, can be either a user nick or a channel.

 -
  name: message
  types: [String]
  description: >
    Message to send.

 -
  name: protect
  types: [Boolean]
  description: >
    Flood protection for long messages, if `true` will delay messages. Default: `false`.

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC.version"
parent_id: "IRC"
type: class property
line_number: 659
description: |
  Version of [[IRC]] code.

signatures:
 -
  signature: "IRC.version"
  return_value: "String"
file: /Users/gianni/Projects/javascript/IRC/lib/irc.js

---
id: "IRC.options"
parent_id: "IRC"
type: namespace
line_number: 681
description: |
  Default global options, all instances will inherit these options.
  
  ### Defaults
  
       IRC.options =
         { server:   '127.0.0.1'
         , port:     6667
         , encoding: 'ascii'
         , nick:     'js-irc'
         , user:
           { username:   'js-irc'
           , hostname:   'thetubes'
           , servername: 'tube1'
           , realname:   'Javascript Bot'
           }
         }

file: /Users/gianni/Projects/javascript/IRC/lib/irc.js